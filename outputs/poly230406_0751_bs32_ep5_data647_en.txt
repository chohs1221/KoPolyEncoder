============================================================
File Name: poly230406_0751_bs32_ep5_data647_en
START!! 2023_04_06 / 07_51
model: poly
path: bert-base-uncased
trainset: stackfaq_train_647
validset: stackfaq_valid_72
m: 16
seed: 42
epoch: 5
learning rate: 5e-05
batch size: 32
accumulation: 1
max length: 100
language: en
scheduler: True
description: 

train: 647
valid: 72
['How do I split conversations in Gmail?\n', 'How can I set a Gmail filter that finds email sent “only to me”?\n', 'How to view the parent folder of a Google Document?\n', 'Is there any Social Translation web site? [closed]\n', 'How do I share a search query from Google?\n']
['Unfortunately it is not possible to split Gmail threads. However, you can mark some messages as "unread from here". When you reply, change the title and reply in a new composing window, so that at least the follow-ups are split.      \n', "In the To field, use me -* .  This could also be broken out in the other fields with to:me to:-* .  Here's a thread on Google's help forum..      \n", 'Let\'s provide a means to go to the document\'s parent folder with a click of the mouse.  Place the script below in your document\'s \'container-bound\' script editor. Do this by opening your document and then from the document menu bar, select Tools > Script editor...  If this is your first time editing that document\'s script, default code will populate the editor\'s screen. Simply replace the script content with the code below. Include both the function onOpen() and listParentFolders() listed below.  Save the script in the editor and then \'refresh\' the browse window displaying the associated document. A new menu item will appear for the document named Utils. Clicking on the Utils Menu pad will display the menu popup, Show Path. This script will display the directory path as a list of hyperlinks.  function onOpen() {     // Add a menu with some items, some separators, and a sub-menu.   DocumentApp.getUi().createMenu(\'Utils\')       .addItem(\'Show Path\', \'listParentFolders\')       .addToUi(); }     function listParentFolders() {    var theDocument = DocumentApp.getActiveDocument();    var docID = theDocument.getId();    var theFile = DocsList.getFileById(docID);    var parents = theFile.getParents();    // No folders   if ( parents == null ) return;    var folder = parents[0];    var folderName = folder.getName();    var folderURL = folder.getUrl();    var folders = [[folderName,folderURL]];    while (folderName != "Root"){       parents = folder.getParents();       folder = parents[0];       folderName = folder.getName();       folderURL = folder.getUrl();       folders.unshift([folderName,folderURL]);   }    var app = UiApp.createApplication().setTitle("Folder Hierarchy").setHeight(250).setWidth(300);    var grid = app.createGrid(folders.length, 1).setStyleAttribute(0, 0, "width", "300px").setCellPadding(5);    var indentNum = 0, link;    for (var fldCntr = 0; fldCntr < folders.length; fldCntr++){       folderName = folders[fldCntr][0];       folderURL = folders[fldCntr][1];       link = app.createAnchor(folderName, folderURL).setId("id_" + fldCntr).setStyleAttribute("font-size", "10px");       grid.setWidget(indentNum, 0, link);       indentNum += 1;   }    app.add(grid);    DocumentApp.getUi().showSidebar(app); }      \n', 'Cucumis is a community of translators who share their linguistic knowledge and help each other online.  http://www.cucumis.org/      \n', 'For a bit more flair, try http://lmgtfy.com/ . As in, http://lmgtfy.com/?q=how+do+a+share+a+Google+query      \n']

train loss: 10.517445087432861 / valid loss: 5.514084339141846 -------------------- epoch: 0 iteration: 2 ==> save
train loss: 5.6187779903411865 / valid loss: 3.540666699409485 -------------------- epoch: 0 iteration: 4 ==> save
train loss: 3.336310863494873 / valid loss: 2.976176619529724 -------------------- epoch: 0 iteration: 6 ==> save
train loss: 2.743140697479248 / valid loss: 2.493763566017151 -------------------- epoch: 0 iteration: 8 ==> save
train loss: 2.461385130882263 / valid loss: 2.081554412841797 -------------------- epoch: 0 iteration: 10 ==> save
scheduler!
train loss: 2.005460262298584 / valid loss: 2.218236565589905 -------------------- epoch: 0 iteration: 12
train loss: 1.9941551685333252 / valid loss: 2.1503385305404663 -------------------- epoch: 0 iteration: 14
train loss: 2.216411769390106 / valid loss: 1.8533280491828918 -------------------- epoch: 0 iteration: 16 ==> save
train loss: 1.803489863872528 / valid loss: 1.885683536529541 -------------------- epoch: 0 iteration: 18
train loss: 1.867672860622406 / valid loss: 1.770176112651825 -------------------- epoch: 0 iteration: 20 ==> save
scheduler!
train loss: 1.4369916319847107 / valid loss: 1.7545912861824036 -------------------- epoch: 1 iteration: 2 ==> save
train loss: 1.64504736661911 / valid loss: 1.6867040991783142 -------------------- epoch: 1 iteration: 4 ==> save
train loss: 1.485198736190796 / valid loss: 1.6903599500656128 -------------------- epoch: 1 iteration: 6
train loss: 1.0545200109481812 / valid loss: 1.6564412117004395 -------------------- epoch: 1 iteration: 8 ==> save
train loss: 1.3975364565849304 / valid loss: 1.7435262203216553 -------------------- epoch: 1 iteration: 10
scheduler!
train loss: 1.3576590418815613 / valid loss: 1.8668230772018433 -------------------- epoch: 1 iteration: 12
train loss: 1.6423662900924683 / valid loss: 1.822887361049652 -------------------- epoch: 1 iteration: 14
train loss: 1.3714019656181335 / valid loss: 1.6222938299179077 -------------------- epoch: 1 iteration: 16 ==> save
train loss: 0.9464044272899628 / valid loss: 1.435654103755951 -------------------- epoch: 1 iteration: 18 ==> save
train loss: 1.1719748377799988 / valid loss: 1.3865029215812683 -------------------- epoch: 1 iteration: 20 ==> save
scheduler!
train loss: 0.9977553486824036 / valid loss: 1.3492740392684937 -------------------- epoch: 2 iteration: 2 ==> save
train loss: 0.8377926647663116 / valid loss: 1.4209867119789124 -------------------- epoch: 2 iteration: 4
train loss: 0.9024368822574615 / valid loss: 1.3257642984390259 -------------------- epoch: 2 iteration: 6 ==> save
train loss: 0.7746088802814484 / valid loss: 1.3333391547203064 -------------------- epoch: 2 iteration: 8
train loss: 1.4433996081352234 / valid loss: 1.3584006428718567 -------------------- epoch: 2 iteration: 10
scheduler!
train loss: 0.8378328680992126 / valid loss: 1.3132312893867493 -------------------- epoch: 2 iteration: 12 ==> save
train loss: 0.8034942150115967 / valid loss: 1.44253009557724 -------------------- epoch: 2 iteration: 14
train loss: 0.8955269753932953 / valid loss: 1.3654164671897888 -------------------- epoch: 2 iteration: 16
train loss: 0.634591668844223 / valid loss: 1.5630739331245422 -------------------- epoch: 2 iteration: 18
train loss: 0.6853362917900085 / valid loss: 1.2506569623947144 -------------------- epoch: 2 iteration: 20 ==> save
scheduler!
train loss: 0.6971385180950165 / valid loss: 1.2529601454734802 -------------------- epoch: 3 iteration: 2
train loss: 0.5459047853946686 / valid loss: 1.5070154666900635 -------------------- epoch: 3 iteration: 4
train loss: 0.58206906914711 / valid loss: 1.386694312095642 -------------------- epoch: 3 iteration: 6
train loss: 0.6068100333213806 / valid loss: 1.196008712053299 -------------------- epoch: 3 iteration: 8 ==> save
train loss: 0.5658388733863831 / valid loss: 1.5243940949440002 -------------------- epoch: 3 iteration: 10
scheduler!
train loss: 0.5820616781711578 / valid loss: 1.4048433899879456 -------------------- epoch: 3 iteration: 12
train loss: 0.5857597291469574 / valid loss: 1.230631411075592 -------------------- epoch: 3 iteration: 14
train loss: 0.606622725725174 / valid loss: 1.4211537837982178 -------------------- epoch: 3 iteration: 16
train loss: 0.6843602359294891 / valid loss: 1.2778809666633606 -------------------- epoch: 3 iteration: 18
train loss: 0.5613836348056793 / valid loss: 1.3119646906852722 -------------------- epoch: 3 iteration: 20
scheduler!
train loss: 0.424106240272522 / valid loss: 1.5495636463165283 -------------------- epoch: 4 iteration: 2
train loss: 0.5012499541044235 / valid loss: 1.60902339220047 -------------------- epoch: 4 iteration: 4
train loss: 0.6602277159690857 / valid loss: 1.352624535560608 -------------------- epoch: 4 iteration: 6
train loss: 0.5107903629541397 / valid loss: 1.243844449520111 -------------------- epoch: 4 iteration: 8
train loss: 0.4130711853504181 / valid loss: 1.1353009343147278 -------------------- epoch: 4 iteration: 10 ==> save
scheduler!
train loss: 0.3880561888217926 / valid loss: 1.2493442296981812 -------------------- epoch: 4 iteration: 12
train loss: 0.4494357258081436 / valid loss: 1.2938498854637146 -------------------- epoch: 4 iteration: 14
train loss: 0.5980920791625977 / valid loss: 1.3534376621246338 -------------------- epoch: 4 iteration: 16
train loss: 0.7047793865203857 / valid loss: 1.25838702917099 -------------------- epoch: 4 iteration: 18
train loss: 0.6219995319843292 / valid loss: 1.2091606259346008 -------------------- epoch: 4 iteration: 20
scheduler!
END!! 2023_04_06 / 07_52
RUNNING TIME: 0:00:54
============================================================



